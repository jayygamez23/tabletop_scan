#include "CloudVisualizer.h"

#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/io/pcd_io.h>
#include <pcl/io/ply_io.h>
#include <pcl/common/time.h>

#include <pcl/sample_consensus/model_types.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/sac_model_plane.h>
#include <pcl/segmentation/sac_segmentation.h>

#include <pcl/filters/voxel_grid.h>
#include <pcl/filters/passthrough.h>
#include <pcl/filters/extract_indices.h> 

#include <pcl/kdtree/kdtree_flann.h>
#include <pcl/kdtree/io.h>
#include <pcl/segmentation/euclidean_cluster_comparator.h>
#include <pcl/segmentation/extract_clusters.h>

#define NUM_COMMAND_ARGS 1

// function prototypes
void pointPickingCallback(const pcl::visualization::PointPickingEvent& event, void* cookie);
void keyboardCallback(const pcl::visualization::KeyboardEvent &event, void* viewer_void);
void segmentPlane(const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &cloudIn, pcl::PointIndices::Ptr &inliers, double distanceThreshold, int maxIterations);
void segmentPlaneCluster(const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &cloudIn, const pcl::PointIndices::Ptr &clusterIndices, pcl::PointIndices::Ptr &inliers, double distanceThreshold, int maxIterations);
void segmentSphereCluster(const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &cloudIn, const pcl::PointIndices::Ptr &clusterIndices, pcl::PointIndices::Ptr &inliers, double distanceThreshold, int maxIterations);

/***********************************************************************************************************************
* @brief callback function for handling a point picking event
* @param[in] event handle generated by the visualization window
* @param[in] cookie user data passed by the event
**********************************************************************************************************************/
void pointPickingCallback(const pcl::visualization::PointPickingEvent& event, void* cookie)
{
    static int pickCount = 0;
    static pcl::PointXYZRGBA lastPoint;

    pcl::PointXYZRGBA p;
    event.getPoint(p.x, p.y, p.z);

    std::cout << "POINT CLICKED: " << p.x << " " << p.y << " " << p.z << std::endl;

    // if we have picked a point previously, compute the distance
    if(pickCount % 2 == 1)
    {
        double d = std::sqrt((p.x - lastPoint.x) * (p.x - lastPoint.x) + (p.y - lastPoint.y) * (p.y - lastPoint.y) + (p.z - lastPoint.z) * (p.z - lastPoint.z));
        std::cout << "DISTANCE BETWEEN THE POINTS: " << d << std::endl;
    }

    // update the last point and pick count
    lastPoint.x = p.x;
    lastPoint.y = p.y;
    lastPoint.z = p.z;
    pickCount++;
}

/***********************************************************************************************************************
* @brief callback function for handling a keypress event
* @param[in] event handle generated by the visualization window
* @param[in] viewer_void user data passed by the event
**********************************************************************************************************************/
void keyboardCallback(const pcl::visualization::KeyboardEvent &event, void* viewer_void)
{
    // handle key down events
    if(event.keyDown())
    {
        // handle any keys of interest
        switch(event.getKeyCode())
        {
            case 'a':
                std::cout << "KEYPRESS DETECTED: '" << event.getKeySym() << "'" << std::endl;
                break;
            default:
                break;
        }
    }
}

/***********************************************************************************************************************
* @brief Opens a point cloud file
*
* Opens a point cloud file in either PCD or PLY format
*
* @param[out] cloudOut pointer to opened point cloud
* @param[in] filename path and name of input file
* @return false if an error occurred while opening file
**********************************************************************************************************************/
bool openCloud(pcl::PointCloud<pcl::PointXYZRGBA>::Ptr &cloudOut, const char* fileName)
{
    // convert the file name to string
    std::string fileNameStr(fileName);

    // handle various file types
    std::string fileExtension = fileNameStr.substr(fileNameStr.find_last_of(".") + 1);
    if(fileExtension.compare("pcd") == 0)
    {
        // attempt to open the file
        if(pcl::io::loadPCDFile<pcl::PointXYZRGBA>(fileNameStr, *cloudOut) == -1)
        {
            PCL_ERROR("error while attempting to read pcd file: %s \n", fileNameStr.c_str());
            return false;
        }
        else
        {
            return true;
        }
    }
    else if(fileExtension.compare("ply") == 0)
    {
        // attempt to open the file
        if(pcl::io::loadPLYFile<pcl::PointXYZRGBA>(fileNameStr, *cloudOut) == -1)
        {
            PCL_ERROR("error while attempting to read pcl file: %s \n", fileNameStr.c_str());
            return false;
        }
        else
        {
            return true;
        }
    }
    else
    {
        PCL_ERROR("error while attempting to read unsupported file: %s \n", fileNameStr.c_str());
        return false;
    }
}

/*******************************************************************************************************************//**
 * @brief Locate a plane in the cloud
 *
 * Perform planar segmentation using RANSAC, returning the plane parameters and point indices
 *
 * @param[in] cloudIn pointer to input point cloud
 * @param[out] inliers list containing the point indices of inliers
 * @param[in] distanceThreshold maximum distance of a point to the planar model to be considered an inlier
 * @param[in] maxIterations maximum number of iterations to attempt before returning
 * @return the number of inliers
 **********************************************************************************************************************/
void segmentPlane(const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &cloudIn, pcl::PointIndices::Ptr &inliers, double distanceThreshold, int maxIterations)
{
    // store the model coefficients
    pcl::ModelCoefficients::Ptr coefficients(new pcl::ModelCoefficients);

    // Create the segmentation object for the planar model and set the parameters
    pcl::SACSegmentation<pcl::PointXYZRGBA> seg;
    seg.setOptimizeCoefficients(true);
    seg.setModelType(pcl::SACMODEL_PLANE);
    seg.setMethodType(pcl::SAC_RANSAC);
    seg.setMaxIterations(maxIterations);
    seg.setDistanceThreshold(distanceThreshold);

    // Segment the largest planar component from the remaining cloud
    seg.setInputCloud(cloudIn);
    seg.segment(*inliers, *coefficients);
}

/*******************************************************************************************************************//**
 * @brief Locate a plane in a cluster from the cloud
 *
 * Perform planar segmentation using RANSAC, returning the plane parameters and point indices
 *
 * @param[in] cloudIn pointer to input point cloud
 * @param[in] clusterIndices list containing the point indices of the cluster
 * @param[out] inliers list containing the point indices of inliers
 * @param[in] distanceThreshold maximum distance of a point to the planar model to be considered an inlier
 * @param[in] maxIterations maximum number of iterations to attempt before returning
 * @return the number of inliers
 **********************************************************************************************************************/
void segmentPlaneCluster(const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &cloudIn, const pcl::PointIndices::Ptr &clusterIndices, pcl::PointIndices::Ptr &inliers, double distanceThreshold, int maxIterations)
{
    // store the model coefficients
    pcl::ModelCoefficients::Ptr coefficients(new pcl::ModelCoefficients);

    // Create the segmentation object for the planar model and set the parameters
    pcl::SACSegmentation<pcl::PointXYZRGBA> seg;
    seg.setOptimizeCoefficients(true);
    seg.setModelType(pcl::SACMODEL_PLANE);
    seg.setMethodType(pcl::SAC_RANSAC);
    seg.setMaxIterations(maxIterations);
    seg.setDistanceThreshold(distanceThreshold);

    // Segment the planar component from the cluster
    seg.setInputCloud(cloudIn); 
    seg.setIndices(clusterIndices);
    seg.segment(*inliers, *coefficients);
}

/*******************************************************************************************************************//**
 * @brief Locate a sphere in a cluster from the cloud
 *
 * Perform sphere segmentation using RANSAC, returning the sphere parameters and point indices
 *
 * @param[in] cloudIn pointer to input point cloud
 * @param[in] clusterIndices list containing the point indices of the cluster
 * @param[out] inliers list containing the point indices of inliers
 * @param[in] distanceThreshold maximum distance of a point to the sphere model to be considered an inlier
 * @param[in] maxIterations maximum number of iterations to attempt before returning
 * @return the number of inliers
 **********************************************************************************************************************/
void segmentSphereCluster(const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &cloudIn, const pcl::PointIndices::Ptr &clusterIndices, pcl::PointIndices::Ptr &inliers, double distanceThreshold, int maxIterations)
{
    // store the model coefficients
    pcl::ModelCoefficients::Ptr coefficients(new pcl::ModelCoefficients);

    // Create the segmentation object for the sphere model and set the parameters
    pcl::SACSegmentation<pcl::PointXYZRGBA> seg;
    seg.setOptimizeCoefficients(true);
    seg.setModelType(pcl::SACMODEL_SPHERE);
    seg.setMethodType(pcl::SAC_RANSAC);
    seg.setRadiusLimits(0.01, 0.12); 
    seg.setMaxIterations(maxIterations);
    seg.setDistanceThreshold(distanceThreshold);

    // Segment the sphere component from the cluster
    seg.setInputCloud(cloudIn);
    seg.setIndices(clusterIndices); 
    seg.segment(*inliers, *coefficients);
}

int main(int argc, char** argv)
{
    // validate and parse the command line arguments
    if(argc != NUM_COMMAND_ARGS + 1)
    {
        std::printf("USAGE: %s <file_name>\n", argv[0]);
        return 0;
    }

    // parse the command line arguments
    char* fileName = argv[1];

    // create a stop watch for measuring time
    pcl::StopWatch watch;

    // initialize the cloud viewer
    CloudVisualizer CV("Rendering Window");

    // start timing the processing step
    watch.reset();

    // open the point cloud
    pcl::PointCloud<pcl::PointXYZRGBA>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZRGBA>);
    openCloud(cloud, fileName);

    // eliminate any noise and unnecessary points in the cloud 
    pcl::PointCloud<pcl::PointXYZRGBA>::Ptr ptFilter(new pcl::PointCloud<pcl::PointXYZRGBA>); 
    pcl::PassThrough<pcl::PointXYZRGBA> pt; 
    pt.setInputCloud(cloud); 
    pt.setFilterFieldName("z"); 
    pt.setFilterLimits(-1.0, 0.0); 
    pt.filter(*ptFilter); 

    // downsample the cloud using a voxel grid filter
    const float voxelSize = 0.01;
    pcl::PointCloud<pcl::PointXYZRGBA>::Ptr cloudFiltered(new pcl::PointCloud<pcl::PointXYZRGBA>);
    pcl::VoxelGrid<pcl::PointXYZRGBA> voxFilter;
    voxFilter.setInputCloud(ptFilter);
    voxFilter.setLeafSize(static_cast<float>(voxelSize), static_cast<float>(voxelSize), static_cast<float>(voxelSize));
    voxFilter.filter(*cloudFiltered);
    //std::cout << "Points before downsampling: " << ptFilter->points.size() << std::endl;
    //std::cout << "Points after downsampling: " << cloudFiltered->points.size() << std::endl;

    // copy the original filtered point cloud into the output cloud
    pcl::PointCloud<pcl::PointXYZRGBA>::Ptr outputCloud(new pcl::PointCloud<pcl::PointXYZRGBA>); 
    pcl::copyPointCloud(*cloudFiltered, *outputCloud); 

    // find the tabletop plane
    const float distanceThreshold = 0.0127;
    const int maxIterations = 5000;
    pcl::PointIndices::Ptr inliers(new pcl::PointIndices);
    segmentPlane(cloudFiltered, inliers, distanceThreshold, maxIterations);
    //std::cout << "Segmentation result: " << inliers->indices.size() << " points" << std::endl;

    // color the tabletop blue
    for(int i = 0; i < inliers->indices.size(); i++)
    {
        int index = inliers->indices.at(i);
        outputCloud->points.at(index).r = 0;
        outputCloud->points.at(index).g = 0;
        outputCloud->points.at(index).b = 255;
    }

    // extract the plane and place into the output cloud
    pcl::ExtractIndices<pcl::PointXYZRGBA> extract; 
    extract.setInputCloud(cloudFiltered); 
    extract.setIndices(inliers); 
    extract.setKeepOrganized(true); 
    extract.setNegative(true); 
    extract.filter(*cloudFiltered); 

    // create the vector of indices lists (each element contains a list of imultiple indices)
    const float clusterDistance = 0.02;
    int minClusterSize = 50;
    int maxClusterSize = 100000;
    std::vector<pcl::PointIndices> clusterIndices;

    // Creating the KdTree object for the search method of the extraction
    pcl::search::KdTree<pcl::PointXYZRGBA>::Ptr tree(new pcl::search::KdTree<pcl::PointXYZRGBA>);
    tree->setInputCloud(cloudFiltered);

    // create the euclidian cluster extraction object
    pcl::EuclideanClusterExtraction<pcl::PointXYZRGBA> ec;
    ec.setClusterTolerance(clusterDistance);
    ec.setMinClusterSize(minClusterSize);
    ec.setMaxClusterSize(maxClusterSize);
    ec.setSearchMethod(tree);
    ec.setInputCloud(cloudFiltered);

    // clear inliers for next segmentation
    inliers->indices.clear(); 

    // perform the clustering
    ec.extract(clusterIndices);
    //std::cout << "Clusters identified: " << clusterIndices.size() << std::endl;

    // keep count of the number of items
    int spheres = 0; 
    int boxes = 0; 

    // perform RANSAC segmention and color each cluster
    for(int i = 0; i < clusterIndices.size(); i++)
    {
        pcl::PointIndices cluster = clusterIndices[i]; 
        pcl::PointIndices::Ptr clusterInliers(new pcl::PointIndices(cluster));

        segmentSphereCluster(cloudFiltered, clusterInliers, inliers, distanceThreshold, maxIterations); 

        if(inliers->indices.size() >= 200 && inliers->indices.size() <= 300)
        {
            //std::cout << "Sphere found!" << std::endl; 
            // color the spheres red
            for(int i = 0; i < inliers->indices.size(); i++)
            {
                int index = inliers->indices.at(i);
                outputCloud->points.at(index).r = 255;
                outputCloud->points.at(index).g = 0;
                outputCloud->points.at(index).b = 0;
            }

            spheres++; 
        }

        else
        {
            segmentPlaneCluster(cloudFiltered, clusterInliers, inliers, distanceThreshold, maxIterations); 
            //std::cout << "Box found!" << std::endl; 
            // color the boxes green
            for(int i = 0; i < inliers->indices.size(); i++)
            {
                int index = inliers->indices.at(i);
                outputCloud->points.at(index).r = 0;
                outputCloud->points.at(index).g = 255;
                outputCloud->points.at(index).b = 0;
            }

            for(int j = 0; j < clusterIndices.at(i).indices.size(); j++)
            {
                outputCloud->points.at(clusterIndices.at(i).indices.at(j)).r = 0;
                outputCloud->points.at(clusterIndices.at(i).indices.at(j)).g = 255;
                outputCloud->points.at(clusterIndices.at(i).indices.at(j)).b = 0;
            }

            boxes++; 
        }

        //std::cout << "Size of inliers: " << inliers->indices.size() << std::endl;

        extract.setInputCloud(cloudFiltered); 
        extract.setIndices(inliers); 
        extract.setKeepOrganized(true); 
        extract.setNegative(true); 
        extract.filter(*cloudFiltered); 

        inliers->indices.clear();
        clusterInliers->indices.clear(); 

    }

    // get the elapsed time
    double elapsedTime = watch.getTimeSeconds();
    std::cout << elapsedTime << " seconds passed " << std::endl;

    // display the count results
    std::cout << "BOX COUNT: " << boxes << std::endl; 
    std::cout << "SPHERE COUNT: " << spheres << std::endl; 

    // save the output cloud into an output pcd file
    pcl::io::savePCDFile("../output.pcd", *outputCloud); 

    // render the scene
    CV.addCloud(outputCloud);
    CV.addCoordinateFrame(outputCloud->sensor_origin_, outputCloud->sensor_orientation_);
    //CV.addCloud(cloudFiltered);
    //CV.addCoordinateFrame(cloudFiltered->sensor_origin_, cloudFiltered->sensor_orientation_);

    // register mouse and keyboard event callbacks
    CV.registerPointPickingCallback(pointPickingCallback, outputCloud);
    //CV.registerPointPickingCallback(pointPickingCallback, cloudFiltered);
    CV.registerKeyboardCallback(keyboardCallback);

    // enter visualization loop
    while(CV.isRunning())
    {
        CV.spin(100);
    }

    // exit program
    return 0;
}
